# Задание-1:
# Написать программу, выполняющую операции (сложение и вычитание) с простыми дробями.
# Дроби вводятся и выводятся в формате:
# n x/y ,где n - целая часть, x - числитель, у - знаменатель.
# Дроби могут быть отрицательные и не иметь целой части, или иметь только целую часть.
# Примеры:
# Ввод: 5/6 + 4/7 (всё выражение вводится целиком в виде строки)
# Вывод: 1 17/42  (результат обязательно упростить и выделить целую часть)
# Ввод: -2/3 - -2
# Вывод: 1 1/3

ex = "-2/3 + -2"


# Определяем функции, которые нам понаобятся для решения:

def check_whole(fraction):
    if " " in fraction and "/" in fraction:
        n = fraction.split()[0]  # выделяем целое
        x = (fraction.split()[1]).split('/')[0]  # выделяем числитель
        y = (fraction.split()[1]).split('/')[1]  # выделяем знаменатель
    elif "/" not in fraction:
        n = fraction
        x = 0
        y = 0
    else:
        n = 0
        x = fraction.split('/')[0]
        y = fraction.split('/')[1]
    lst = [n, x, y]
    int_lst = list(map(int, lst))
    return int_lst


def assign_func(ex_mod):  # функция возвращает листы переменных из исходного выражения (ex)

    lst_1 = check_whole(ex_mod[0])
    lst_2 = check_whole(ex_mod[1])
    return lst_1, lst_2


def nod(a, b):  # функция наибольший общий делитель
    while a != 0 and b != 0:
        if a > b:
            a %= b
        else:
            b %= a
    return a + b


if '+' in ex:  # ВЕТКА 1 ОСНОВНОГО КОДА
    ex_mod = ex.split(" + ")  # делим исходное выражение по оператору на список из 2 выражений
    lst_1 = check_whole(ex_mod[0])
    n1 = lst_1[0]
    x1 = lst_1[1]
    y1 = lst_1[2]

    lst_2 = check_whole(ex_mod[1])
    n2 = lst_2[0]
    x2 = lst_2[1]
    y2 = lst_2[2]

    whole_sum = n1 + n2
    numerator = x1 * y2 + x2 * y1
    denominator = y1 * y2
    f_nod = nod(numerator, denominator)
    if y1 != 0 and y2 != 0:
        add_whole = numerator // denominator
        final_denom = denominator / f_nod
        final_num = (numerator - denominator * add_whole) / f_nod
    else:
        add_whole = 0
        final_num = numerator / f_nod
        final_denom = denominator / f_nod
    main_whole = whole_sum + add_whole


else:  # ВЕТКА 2 ОСНОВНОГО КОДА
    pass

print(main_whole, int(final_num), '/', int(final_denom))

# написать упрощение чеерз НОД и без пробелов при выводе ответа
print(gcd(numerator, denominator))


# Задание-2:
# Дана ведомость расчета заработной платы (файл "data/workers").
# Рассчитайте зарплату всех работников, зная что они получат полный оклад,
# если отработают норму часов. Если же они отработали меньше нормы,
# то их ЗП уменьшается пропорционально, а за заждый час переработки
# они получают удвоенную ЗП, пропорциональную норме.
# Кол-во часов, которые были отработаны, указаны в файле "data/hours_of"


# Задание-3:
# Дан файл ("data/fruits") со списком фруктов.
# Записать в новые файлы все фрукты, начинающиеся с определенной буквы.
# Т.е. в одном файле будут все фрукты на букву “А”, во втором на “Б” и т.д.
# Файлы назвать соответственно.
# Пример имен файлов: fruits_А, fruits_Б, fruits_В ….
# Важно! Обратите внимание, что нет фруктов, начинающихся с некоторых букв.
# Напишите универсальный код, который будет работать с любым списком фруктов
# и распределять по файлам в зависимости от первых букв, имеющихся в списке фруктов.
# Подсказка:
# Чтобы получить список больших букв русского алфавита:
# print(list(map(chr, range(ord('А'), ord('Я')+1))))
