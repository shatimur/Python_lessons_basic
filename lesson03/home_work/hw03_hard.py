# Задание-1:
# Написать программу, выполняющую операции (сложение и вычитание) с простыми дробями.
# Дроби вводятся и выводятся в формате:
# n x/y ,где n - целая часть, x - числитель, у - знаменатель.
# Дроби могут быть отрицательные и не иметь целой части, или иметь только целую часть.
# Примеры:
# Ввод: 5/6 + 4/7 (всё выражение вводится целиком в виде строки)
# Вывод: 1 17/42  (результат обязательно упростить и выделить целую часть)
# Ввод: -2/3 - -2
# Вывод: 1 1/3

ex = "5/6 + 4/7"

    # Определяем функции, которые нам понадобятся для решения:

def check_whole(fraction):  # здесь работаем с отдельной дробью
    if " " in fraction and "/" in fraction:         # если есть и целая, и дробная часть
        n = fraction.split()[0]                   # выделяем целое
        x = (fraction.split()[1]).split('/')[0]   # выделяем числитель
        y = (fraction.split()[1]).split('/')[1]   # выделяем знаменатель
    elif "/" not in fraction:                       # если только целая часть
        n = fraction
        x = 0
        y = 1
    else:                                           # если только дробная часть
        n = 0
        x = fraction.split('/')[0]
        y = fraction.split('/')[1]
    lst = [n, x, y]
    int_lst = list(map(abs, map(int, lst)))
    return int_lst

def nod(a, b):                      # функция наибольший общий делитель
    a = abs(a)
    b = abs(b)
    while a != 0 and b != 0:
        if a > b:
            a %= b
        else:
            b %= a
    return a + b                       # одно из слагаемых здесь 0, поэтому для получения второго нод, можно просто их сложить и не писать if

def plus_minus(expr):                   # знак перед дробью
    if "-" in expr:
        k = -1
    else:
        k = 1
    return k

def whole(numerator, denominator):      # определяем целое с сохранением знака. без такой функции целочисленное деление с отриц.числами работает странно
    if numerator < 0:
        a = (abs(numerator) // denominator)*(-1)
    else:
        a = numerator // denominator
    return a

if '+' in ex:
    ex_mod = ex.split(" + ")
    sign = 1                        # знак между дробями - сложение или вычитание
else:
    ex_mod = ex.split(" - ")
    sign = -1

lst_1 = check_whole(ex_mod[0])
k1 = plus_minus(ex_mod[0])
n1 = abs(lst_1[0])
x1 = abs(lst_1[1])
y1 = lst_1[2]

lst_2 = check_whole(ex_mod[1])
k2 = plus_minus(ex_mod[1])
n2 = abs(lst_2[0])
x2 = abs(lst_2[1])
y2 = lst_2[2]

numerator = k1*(n1*y1 + x1)*y2 + sign *k2*(n2*y2 + x2)*y1
denominator = y1*y2


whole = whole(numerator, denominator)
f_nod = nod(abs(numerator), denominator)
num_frac = int((abs(numerator) % denominator)/f_nod)

print(whole, num_frac, '/', denominator)



# Задание-2:
# Дана ведомость расчета заработной платы (файл "data/workers").
# Рассчитайте зарплату всех работников, зная что они получат полный оклад,
# если отработают норму часов. Если же они отработали меньше нормы,
# то их ЗП уменьшается пропорционально, а за заждый час переработки
# они получают удвоенную ЗП, пропорциональную норме.
# Кол-во часов, которые были отработаны, указаны в файле "data/hours_of"


# Задание-3:
# Дан файл ("data/fruits") со списком фруктов.
# Записать в новые файлы все фрукты, начинающиеся с определенной буквы.
# Т.е. в одном файле будут все фрукты на букву “А”, во втором на “Б” и т.д.
# Файлы назвать соответственно.
# Пример имен файлов: fruits_А, fruits_Б, fruits_В ….
# Важно! Обратите внимание, что нет фруктов, начинающихся с некоторых букв.
# Напишите универсальный код, который будет работать с любым списком фруктов
# и распределять по файлам в зависимости от первых букв, имеющихся в списке фруктов.
# Подсказка:
# Чтобы получить список больших букв русского алфавита:
# print(list(map(chr, range(ord('А'), ord('Я')+1))))
